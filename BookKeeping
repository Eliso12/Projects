using System.Text.Json;
public class Book
{
    public string Title { get; set; }
    public string Author { get; set; }
    public int Year { get; set; }

    public Book(string title, string author, int year)
    {
        Title = title;
        Author = author;
        Year = year;
    }

    public override string ToString()
    {
        return $"{Title} by {Author}, {Year}";
    }
}

public class BookManager
{
    private const string FilePath = "C:\\Users\\eliso\\Desktop\\data\\books.json";
    private List<Book> books = new List<Book>();

    public BookManager()
    {
        LoadBooksFromFile();
    }

    public void AddBook(Book book)
    {
        books.Add(book);
        SaveBooksToFile();
    }

    public void ShowAllBooks()
    {
        if (books.Count == 0)
        {
            Console.WriteLine("No books found");
        }
        else
        {
            Console.WriteLine("Catalogue of books:");
            foreach (var book in books)
            {
                Console.WriteLine(book);
            }
        }
    }

    public List<Book> SearchBookByTitle(string searchTerm)
    {
        return books.FindAll(book =>
            book.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            book.Author.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            book.Year.ToString().Contains(searchTerm));
    }

    private void LoadBooksFromFile()
    {
        if (File.Exists(FilePath))
        {
            try
            {
                string json = File.ReadAllText(FilePath);
                books = JsonSerializer.Deserialize<List<Book>>(json) ?? new List<Book>();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading books: {ex.Message}");
                books = new List<Book>();
            }
        }
    }

    private void SaveBooksToFile()
    {
        try
        {
            string json = JsonSerializer.Serialize(books, new JsonSerializerOptions { WriteIndented = true });
            File.WriteAllText(FilePath, json);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving books: {ex.Message}");
        }
    }
}

class Program
{
    static void Main()
    {
        BookManager manager = new BookManager();
        bool exit = false;

        while (!exit)
        {
            Console.Clear();
            Console.WriteLine("Book Library:");
            Console.WriteLine("1. Add a new book");
            Console.WriteLine("2. View all books");
            Console.WriteLine("3. Search book");
            Console.WriteLine("4. Exit");
            Console.Write("Choose an option: ");

            switch (Console.ReadLine())
            {
                case "1":
                    string title;
                    while (true)
                    {
                        Console.Write("Enter title: ");
                        title = Console.ReadLine();
                        if (!string.IsNullOrWhiteSpace(title))
                        {
                            break; 
                        }
                        Console.WriteLine("Please enter a valid title.");
                    }
                    string author;
                    while (true)
                    {
                        Console.Write("Enter Author: ");
                        author = Console.ReadLine();
                        if (!string.IsNullOrWhiteSpace(author))
                        {
                            break; 
                        }
                        Console.WriteLine("Please enter a valid author.");
                    }

                    int year;
                    while (true)
                    {
                        Console.Write("Enter Year: ");
                        if (int.TryParse(Console.ReadLine(), out year))
                        {
                                break;
                        }
                        else
                        {
                            Console.WriteLine("Invalid input");
                        }
                    }

                    manager.AddBook(new Book(title, author, year));
                    Console.WriteLine("Book added");
                    Console.ReadKey();
                    break;

                case "2":
                    manager.ShowAllBooks();
                    Console.WriteLine("Press any key to return to the main page");
                    Console.ReadKey();
                    break;

                case "3":
                    Console.Write("Enter the title, author or year: ");
                    string searchTitle = Console.ReadLine();
                    Console.WriteLine();
                    var foundBooks = manager.SearchBookByTitle(searchTitle);
                    if (foundBooks.Count > 0)
                    {
                        Console.WriteLine("Book(s) found:");
                        foreach (var book in foundBooks)
                        {
                            Console.WriteLine(book);
                        }
                    }
                    else
                    {
                        Console.WriteLine("No books found");
                    }
                    Console.WriteLine("Press any key to return to the main page");
                    Console.ReadKey();
                    break;
                case "4":
                    exit = true;
                    break;
                default:
                    Console.WriteLine("Invalid attempt. Please try again");
                    Console.WriteLine("Press any key to return to the main page");
                    Console.ReadKey();
                    break;
            }
        }
    }
}

